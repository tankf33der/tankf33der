(load "1_data.l")

# 1A
(de 1a (M N)
   (make
      (for (X M (<= X N) (inc X))
         (and (prime? X) (link X)) ) ) )
(test
   (2 3 5)
   (1a 2 5) )
(test
   NIL
   (1a 4 4) )
(test
   (3 5 7 11 13 17)
   (1a 3 17) )
(test
   (3 5 7 11 13)
   (1a 3 16) )
(test
   (5 7 11 13 17)
   (1a 4 17) )
(test
   (5 7 11 13)
   (1a 4 16) )
(test
   (2 3 5 7 11 13 17)
   (1a 2 17) )
(test
   (2 3 5 7 11 13)
   (1a 2 16) )
(test
   (2 3)
   (1a 2 3) )
(test
   (2)
   (1a 2 2) )
(test
   NIL
   (1a 20 22) )
(test
   (32771 32779)
   (1a 32771 32779) )
(test
   (65537 65539)
   (1a 65537 65539) )
(test
   9592
   (length (1a 2 100000)) )
(test
   25997
   (length (1a 2 300000)) )

#1B
(de 1b (N Lst)
   (setq Lst (reverse Lst))
      (flip
         (cdr
            (recur (N Lst)
               (ifn (cdr Lst)
                  (and (= N (car Lst)) (list N N))
                  (or
                     (let X (+ N (car Lst))
                        (let? R (recurse X (cdr Lst))
                           (and
                              (= X (car R))
                              (cons N (car Lst) '- (cdr R)) ) ) )
                     (let X (- N (car Lst))
                        (let? R (recurse X (cdr Lst))
                           (and
                              (= X (car R))
                              (cons N (car Lst) '+ (cdr R)) ) ) ) ) ) ) ) ) )
(test
   '(7 - 3 + 9)
   (1b 13 (7 3 9)) )
(test
   '(7 + 3 - 9)
   (1b 1 (7 3 9)) )
(test
   NIL
   (1b 3 (7 10 0)) )
(test
   '(1 + 1 - 1 - 1)
   (1b 0 (1 1 1 1)) )
(test
   '(8593682 + 31716735 - 21491280 - 17902794 - 33317802 - 
      31903797 - 43140236 - 27960611 + 49962940 - 89871 - 
      21765518 - 824859 - 10008534 + 49081942 + 37138133 - 
      10339902 + 46783173 - 45482021 - 19050964 + 36953244 - 
      15710201 - 13017280 - 32752188 + 4020978 )
   (1b
      -80507031
      (8593682 31716735 21491280 17902794 33317802 31903797 
         43140236 27960611 49962940 89871 21765518 824859 
         10008534 49081942 37138133 10339902 46783173 45482021 
         19050964 36953244 15710201 13017280 32752188 4020978 ) ) )
(test
   '(47430263 + 37046466 + 32623331 + 26340620 + 47869546 + 
      15822595 + 12700768 + 8882492 + 17758756 + 16355077 + 
      30723530 + 2482743 + 39121209 + 45145050 + 546144 + 
      37845919 + 34304710 + 23012101 + 330585 + 9378987 + 
      24083874 + 37742371 + 38458910 + 23107254 )
   (1b
      609113301
      (47430263 37046466 32623331 26340620 47869546 15822595 
         12700768 8882492 17758756 16355077 30723530 2482743 
         39121209 45145050 546144 37845919 34304710 23012101 
         330585 9378987 24083874 37742371 38458910 23107254 ) ) )
(test
   '(39385534 - 30476916 - 15911293 - 38371549 - 21530652 - 
      45043938 - 12621967 - 42525363 - 2134761 - 14111218 - 
      9238325 - 43955014 - 16000617 - 3519470 - 49174155 - 
      14322640 - 17458132 - 48699570 - 47268475 - 42502438 - 
      22440056 - 6954642 - 45947784 - 38376824 )
   (1b
      -589200265
      (39385534 30476916 15911293 38371549 21530652 45043938 
         12621967 42525363 2134761 14111218 9238325 43955014 
         16000617 3519470 49174155 14322640 17458132 48699570 
         47268475 42502438 22440056 6954642 45947784 38376824 ) ) )
(test
   NIL
   (1b
      -41557088
      (39617511 25127921 8755476 23392669 48582703 10476774 
         24861926 12770892 9927042 47979791 32301717 34596359 
         33438284 28462687 49453635 35506206 48431340 12391337 
         16171700 29389632 45893963 32053865 49897411 1104052 ) ) )

#1C
(de 1c (A)
   (let (S NIL  SLen 0  P NIL  R NIL)
      (for (I . N) A
         (let (L 1  H SLen)
            (if (> N (cdr (val (cache 'S H))))
               (cacheset 'S (setq L (inc 'SLen)) (cons I N))
               (while (<= L H)
                  (use (X)
                     (setq X (/ (+ L H) 2))
                     (if (>= (cdr (val (cache 'S X))) N)
                        (setq H (dec X))
                        (setq L (inc X)) ) ) )
               (cacheset 'S L (cons I N)) )
            (cache
               'P
               I
               (or   
                  (car (val (cache 'S (dec L))))
                  -1 ) ) ) )
      (let SLen (car (val (cache 'S SLen)))
         (until (lt0 SLen)
            (push 'R (get A SLen))
            (setq SLen (val (cache 'P SLen))) )
         R ) ) )

(test
   (3 4 5 7 9)
   (1c (6 3 4 8 10 5 7 1 9 2)) )

(test
   (2 3 4 5 8)
   (1c (2 6 3 4 1 2 9 5 8)) )

(test
   (0 2 6 9 11 15)
   (1c (0 8 4 12 2 10 6 14 1 9 5 13 3 11 7 15)) )

(test
   (2 3 4 6)
   (1c (2 5 3 4 6 1)) )

(test
   (2 5 9 12)
   (1c (2 8 5 9 12 6)) )

(test
   (0 1 2 3)
   (1c (0 0 0 0 0 0 1 1 1 1 2 3 0 0 0 1 1 0 1 1 0 1 0 3)) )

(test
   (1 2 3 5) 
   (1c (8 1 2 3 0 5)) )

(test
   (1 2 3 4 6)
   (1c (8 1 3 2 3 9 4 8 6)) )

(test
   (1 8 10 12 14 15 18)
   (1c 
      (28 18 6 9 22 24 17 1 1 14 8 23 10 3 26 30 2 12 23 14 1 
         25 7 1 15 24 3 10 11 18 ) ) )

(test
   1c-data2
   (1c 1c-data1) )

#1D
(de 1d (X1 Y1 X2 Y2 X3 Y3 X Y)
   (let
      (A
         (- (* (- X X3) (- Y2 Y3)) (* (- X2 X3) (- Y Y3)))
         B
         (- (* (- X1 X3) (- Y Y3)) (* (- X X3) (- Y1 Y3)))
         U (- (* (- X1 X3) (- Y2 Y3)) (* (- X2 X3) (- Y1 Y3))) )
      (or
         (and
            (< U 0) (<= U A) (<= A 0) (<= U B) (<= B 0) )
         (and
            (> U 0) (>= U A) (>= A 0) (>= U B) (>= B 0) ) ) ) )

(test
   NIL
   (1d 0 0 100 0 0 100 100 100) )
(test
   T
   (1d 0 0 100 0 0 100 10 10) )
(test
   T
   (1d 0 0 100 0 0 100 50 50) )
(test
   T
   (1d 0 0 100 0 0 100 0 0) )

#1E
(de 1e (A K)
   (let (C NIL  X 7000  R NIL)
      (for I X
         (cacheset 'C I 0) )
      (cacheset 'C 1 1)
      (for I K
         (let Rem 0
            (for J I
               (setq Rem (+ Rem (* A (val (cache 'C J)))))
               (cacheset 'C J (% Rem 10))
               (setq Rem (/ Rem 10)) )
            (and
               (n0 Rem)
               (cacheset 'C (inc I) Rem)) ) )
      (for I X
         (push 'R (val (cache 'C I))) )
      (format R) ) )

(test (** 6 6) (1e 6 6))
(test (** 16 16) (1e 16 16))
(test (** 26 26) (1e 26 26))
(test (** 66 66) (1e 66 66))

#1F
(de 1f (Lst)
   (let A NIL
      (for N Lst
         (accu 'A N 1) )
      (setq A (by cdr sort A))
      (cond
         ((and (not (cdr A)) (= 5 (cdar A)))
            'Impossible)
         ((and (not (cddr A)) (= 4 (cdadr A)))
            'Four )
         ((and 
            (not (cddr A))
            (= 2 (cdar A))
            (= 3 (cdadr A)) )
            'FullHouse )
         ((= 3 (cdr (last A)))
            'Three )
         ((and
            (not (cdddr A))
            (= 2 (cdadr A))
            (= 2 (cdaddr A)) )
            'TwoPairs )
         ((= 2 (cdr (last A)))
            'Pair )
         ((=
            (-1 -1 -1 -1)
            (mapcon
               '((L) (and (cdr L) (cons (- (car L) (cadr L)))))
               (mapcar car A) ) )
            'Straight )
         (T 'Nothing) ) ) )

(test 'Impossible (1f (4 4 4 4 4)))
(test 'Four (1f (1 2 2 2 2)))
(test 'FullHouse (1f (4 4 5 5 5)))
(test 'Three (1f (1 2 9 9 9)))
(test 'TwoPairs (1f (1 7 7 8 8)))
(test 'Pair (1f (1 2 3 8 8)))
(test 'Straight (1f (1 5 2 4 3)))
(test 'Pair (1f (1 3 9 3 2)))
(test 'TwoPairs (1f (1 5 5 4 4)))
(test 'Nothing (1f (10 11 12 13 1)))
