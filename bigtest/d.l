## dmd -release bigint.d
(seed (in "/dev/urandom" (rd 8)))
#  Random patterns:
#  cnt
#     xxx0000000000000000000000000xxxx0000000000000000000000000xxx
#        (| 7 (>> -28 15) (>> -57 7))
#
#     xxx1111111111111111111111111xxxx1111111111111111111111111xxx
#        1FFFFFF0FFFFFF8
#
#
#  dig
#     xxx000000000000000000000000000xxxx000000000000000000000000000xxx
#        (| 7 (>> -30 15) (>> -61 7))
#
#     xxx111111111111111111111111111xxxx111111111111111111111111111xxx
#        1FFFFFFC3FFFFFF8

(de rnd- ()
   (let Big (| (rand 0 14) (>> -56 (rand 0 30)) (>> -100 (rand 0 14)))
      (when (rand T)
         (setq Big (| Big `(hex "1FFFFFF0FFFFFF8"))) )
      (do (rand 0 4)
         (let Dig (| (rand 0 14) (>> -60 (rand 0 30)) (>> -120 (rand 0 17)))
            (when (rand T)
               (setq Dig (| Dig `(hex "1FFFFFFC3FFFFFF8"))) )
            (setq Big (| Dig (>> -128 Big))) ) )
      (if (rand T) Big (- Big)) ) )
(de rnd NIL
   (let B
      (format
         (make
            (do (rand 2048 4096)
               (link (rand 0 9)) ) ) )
      (if (rand T) B (- B)) ) )
(de test1 (S N1)
   (let (N (read)  X (eval (list S N1)))
      (unless (= N X)
         (prinl "^J" N ": (" S " " N1 ") -> " X)
         (bye) ) ) )
(de test2 (S N1 N2)
   (let (N (read)  X (eval (list S N1 N2)))
      (unless (= N X)
         (prinl "^J" N ": (" S " " N1 " " N2 ") -> " X)
         (bye) ) ) )
(de cmp2 (S N1 N2)
   (let (N (read)  X (if (eval (list S N1 N2)) 'true 'false))
      (unless (= N X)
         (prinl "^J" N ": (" S " " N1 " " N2 ") -> " X)
         (bye) ) ) )
(pipe
   (out '("./bigint")
      (do 1000000
         (setq N1 (rnd))
         (while (=0 (setq N2 (rnd))))
         (prinl N1)
         (prinl N2)
         (prinl N1 " + " N2)
         (prinl N1 " - " N2)
         (prinl N1 " * " N2)
         (prinl N1 " % " N2)
         (prinl N1 " / " N2)
         (prinl N1 " > " N2)
         (prinl N1 " >= " N2)
         (prinl N1 " < " N2)
         (prinl N1 " <= " N2)
         (prinl (abs N1) " & " (abs N2))
         (prinl (abs N1) " | " (abs N2))
         (prinl (abs N1) " \^ " (abs N2))
         (prinl (abs N1) " << " 1)
         (prinl (abs N1) " << " 2)
         (prinl (abs N1) " << " 3)
         (prinl (abs N1) " << " 4)
         (prinl (abs N1) " << " 5)
         (prinl (abs N1) " << " 6)
         (prinl (abs N1) " << " 7)
         (prinl (abs N1) " << " 8)
         (prinl (abs N1) " << " 9)
         (prinl (abs N1) " << " 10)
         (prinl (abs N1) " << " 1024)
         (prinl (abs N1) " >> " 1)
         (prinl (abs N1) " >> " 2)
         (prinl (abs N1) " >> " 3)
         (prinl (abs N1) " >> " 4)
         (prinl (abs N1) " >> " 5)
         (prinl (abs N1) " >> " 6)
         (prinl (abs N1) " >> " 7)
         (prinl (abs N1) " >> " 8)
         (prinl (abs N1) " >> " 9)
         (prinl (abs N1) " >> " 10)
         (prinl (abs N1) " >> " 1024)
         (at (0 . 1000) (wait 50)) ) )
   (do 10
      (do 100000
         (setq
            N1 (read)
            N2 (read) )
         (test2 '+ N1 N2)
         (test2 '- N1 N2)
         (test2 '* N1 N2)
         (test2 '% N1 N2)
         (test2 '/ N1 N2)
         (cmp2 '> N1 N2)
         (cmp2 '>= N1 N2)
         (cmp2 '< N1 N2)
         (cmp2 '<= N1 N2)
         (test2 '& (abs N1) (abs N2))
         (test2 '| (abs N1) (abs N2))
         (test2 'x| (abs N1) (abs N2))
         (test2 '>> -1 (abs N1))
         (test2 '>> -2 (abs N1))
         (test2 '>> -3 (abs N1))
         (test2 '>> -4 (abs N1))
         (test2 '>> -5 (abs N1))
         (test2 '>> -6 (abs N1))
         (test2 '>> -7 (abs N1))
         (test2 '>> -8 (abs N1))
         (test2 '>> -9 (abs N1))
         (test2 '>> -10 (abs N1))
         (test2 '>> -1024 (abs N1))
         (test2 '>> 1 (abs N1))
         (test2 '>> 2 (abs N1))
         (test2 '>> 3 (abs N1))
         (test2 '>> 4 (abs N1))
         (test2 '>> 5 (abs N1))
         (test2 '>> 6 (abs N1))
         (test2 '>> 7 (abs N1))
         (test2 '>> 8 (abs N1))
         (test2 '>> 9 (abs N1))
         (test2 '>> 10 (abs N1))
         (test2 '>> 1024 (abs N1))
      )
      (prin ".")
      (flush) )
   (prinl) )
(msg 'OK-d)
(bye)
