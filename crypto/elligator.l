# lets rewrite elligator.sage on PicoLisp
(setq
   *P (- (** 2 255) 19)
   *A 486662
   *SQRT1 NIL
   *D NIL
   *Eby NIL
   *Ebx NIL
   *Edwards_base NIL
)
(de %% (X Y)
   (% (+ Y (% X Y)) Y) )
(de exp (A, B)
   (let D 1
      (for I (chop (bin B))
         (setq D (%% (* D D) *P))
         (and
            (= "1" I)
            (setq D (%% (* D A) *P)) ) )
      D ) )
(de invert (N)
   (exp N (- *P 2)) )
(de m_abs (N)
   (let M (%% N *P)
      (if (>= (/ (dec *P) 2) M)
         M
         (%% (- M) *P) ) ) )
(de chi (N)
   (exp N (/ (dec *P) 2)) )
(de is_square (N)
   (or (=0 (%% N *P)) (=1 (chi N))) )
(setq *SQRT1
   (m_abs
      (*
         (exp 2 (/ (dec *P) 4))
         (exp -1 (/ (+ *P 3) 8)) ) ) )
(de sqrt+ (N)
   (unless (is_square N)
      (quit "Not a square") )
   (let R (exp N (/ (+ *P 3) 8))
      (if (= (%% (* R R) *P) (%% N *P))
         (m_abs R)
         (m_abs (* R *SQRT1)) ) ) )
(de hash_to_curve (R)
   (let
      (W
         (%%
            (*
               (- *A)
               (invert (inc (* 2 (** R 2)))) )
            *P )
         E
         (%%
            (chi
               (+
                  (** W 3)
                  (* *A (** W 2))
                  W ) )
            *P )
         U
         (%%
            (-
               (* E W)
               (/ (* (- 1 E) *A) 2) )
            *P )
         V
         (%%
            (*
               (- E)
               (sqrt+
                  (+
                     (** U 3)
                     (* *A (** U 2))
                     U ) ) )
            *P ) )
      (cons U V) ) )
(de can_curve_to_hash (P)
   (let X (car P)
      (and
         (<> X (- A))
         (is_square (* -2 X (+ X *A))) ) ) )
(de curve_to_hash (P)
   (let
      (U (car P)
         V (cdr P)
         Sq1 (sqrt+ (* (- U) (invert (* 2 (+ U *A)))))
         Sq2 (sqrt+ (* (- (+ U *A)) (invert (* 2 U)))) )
      (if (>= (/ (dec *P) 2) (%% V *P)) Sq1 Sq2) ) )
(setq *D (%% (* -121665 (invert 121666)) *P))
(de point_add (A B)
   (let
      (X1 (car A)
         Y1 (cdr A)
         X2 (car B)
         Y2 (cdr B)
         X
         (%%
            (* (+ (* X1 Y2) (* X2 Y1)) (invert (+ 1 (* *D X1 X2 Y1 Y2))))
            *P )
         Y
         (%%
            (* (+ (* Y1 Y2) (* X1 X2)) (invert (- 1 (* *D X1 X2 Y1 Y2))))
            *P ) )
      (cons X Y) ) )
(de trim+ (S)
   (let
      (Tr (- S (%% S 8))
         Tr (%% Tr `(** 2 254))
         Tr (+ Tr `(** 2 254)) )
      Tr ) )
(de scalarmult (P S)
   # X
   # Y
   (let Acc (cons 0 1)
      (for I (chop (bin (trim+ S)))
         (setq Acc (point_add Acc Acc))
         (and
            (= "1" I)
            (setq Acc (point_add Acc P)) ) )
      Acc ) )
(setq
   *Eby (%% (* 4 (invert 5)) *P)
   *Ebx
   (sqrt+
      (*
         (dec (** *Eby 2))
         (invert (inc (* *D (** *Eby 2)))) ) )
   *Edwards_base (cons *Ebx *Eby) )
(de scalarbase (S)
   (scalarmult *Edwards_base S) )
(de from_edwards (P)
   (let
      (X (car P)
         Y (cdr P)
         U (%% (* (inc Y) (invert (- 1 Y))) *P)
         V (m_abs (* (sqrt+ -486664) U (invert X))) )
      (cons U V) ) )
(de private_to_hash (S)
   (let
      (XY (scalarmult *Edwards_base *Private)
         UV (from_edwards XY) )
      (if (can_curve_to_hash UV)
         (curve_to_hash UV)
         NIL ) ) )
(de full_cycle_check (S)
   (let
      (XY (scalarmult *Edwards_base *Private)
         UV (from_edwards XY)
         H (private_to_hash S)
         C (hash_to_curve H) )
      (list UV H C) ) )
(setq *Private 14074904626401341155369551180448584754667373453244490859944217516317499064576)
(test NIL (private_to_hash *Private))
(test
   '((43040781892050427594145608265502699427324224701665063692814682666944625459343 . 20838055236844828317575985397902694430763502413180418884364445753767930375480) NIL (NIL))
   (full_cycle_check *Private) )

(setq *Private 43586973752584214000503606306153847297570002532270420392061565301986769307139)
(test
   12497659117957793031302988335747524371618773842828966866468312343571701090671
   (private_to_hash *Private) )


(test
   (cons 19403065823481287390508016278028958188341268092489446700427911021026036183835 24588128153701835924826673683334879159563383529419655147704411948633510854994)
   (from_edwards
      (cons
         4545684578946458454576768457684
         56567895678568795656565678956785678956789 ) ) )
(test
   (cons 51317351682257545568938247189885276749437966092370638705105957344068157476134 23671080247213926015351343222066699513530060636187689431672265081444357855217)
   (scalarbase 45456845789464584545767684576845768434879347893478934) )
(test
   (cons 15112221349535400772501151409588531511454012693041857206046113283949847762202 46316835694926478169428394003475163141307993866256225615783033603165251855960)
   *Edwards_base )
(test
   28948022309329048855892791709017766427902041934094717855632830881326175888912
   (trim+ 45456845789464584545767684576845768434879347893478934) )
(test
   (24830403138231796681703477740190921587135258449342575326264716819494114086238 . 45669596180081425621318719439797074897382411705717653100730339592855422843195)
   (point_add
      (cons 4545684578946 45845)
      (cons 45767684576845768 434879347893478934) ) )
(test *D 37095705934669439343138083508754565189542113879843219016388785533085940283555)
(test
   21759831350752055415818935551262588374444830638733243484187888061142886508723
   (curve_to_hash (cons 4545684578946 45845)))
(test
   NIL
   (can_curve_to_hash (cons 4545684578945 45845)) )
(test
   1
   (can_curve_to_hash (cons 4545684578946 45845)) )
(test
   (12115847385937229292018649355599142032739908568210603284705358346106477529708 . 51373816238287372760555117023041920244688181187763450952574789490818585171223)
   (hash_to_curve 4578945789457894578456) )
(test
   23548909541754301439352610919600078944460680743004669453427379179075325930426
   (sqrt+ 4578945789457894578456) )
(test
   19681161376707505956807079304988542015446066515923890162744021073123829784752
   *SQRT1 )
(test 1 (is_square 457894578945454545))
(test NIL (is_square 457894578945454544))
(test 0 (chi *P))
(test 1 (chi 457894578945454545))
(test 1234567 (m_abs 1234567))
(test 0 (m_abs *P))
(test
   123456774577567895678956568989457894574578945789457894545789
   (m_abs -123456774577567895678956568989457894574578945789457894545789) )
(test 0 (invert *P))
(test
   40903448833803765304030505711834176292329494422674962581796698797273844702493
   (invert 45454545768457684576845765) )
(test
   926549609804623448265268294182900512918058893428212027689876489708283
   (exp 123 33) )
(test
   43579178365488290487999733433133644729453586639746054162384555965744964322950
   (exp 3244545454537834663434343434 10000000000000000000) )


(msg 'ok)
(bye)
